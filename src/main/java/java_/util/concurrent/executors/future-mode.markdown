### Future模式
Future模式是Java多线程设计模式中的一种常见模式，它的主要作用就是异步地执行任务，并在需要的时候获取结果。

#### FutureTask一共给任务定义了7种状态：

- NEW：表示任务的初始化状态；
- COMPLETING：表示任务已执行完成（正常完成或异常完成），但任务结果或异常原因还未设置完成，属于中间状态；
- NORMAL：表示任务已经执行完成（正常完成），且任务结果已设置完成，属于最终状态；
- EXCEPTIONAL：表示任务已经执行完成（异常完成），且任务异常已设置完成，属于最终状态；
- CANCELLED：表示任务还没开始执行就被取消（非中断方式），属于最终状态；
- INTERRUPTING：表示任务还没开始执行就被取消（中断方式），正式被中断前的过渡状态，属于中间状态；
- INTERRUPTED：表示任务还没开始执行就被取消（中断方式），且已被中断，属于最终状态。

 ![avatar](https://segmentfault.com/img/bVbiwLO?w=3330&h=2115)
注意：
- FutureTask虽然支持任务的取消（cancel方法），但是只有当任务是初始化（NEW状态）时才有效，否则cancel方法直接返回false；
- 当执行任务时（run方法），无论成功或异常，都会先过渡到COMPLETING状态，直到任务结果设置完成后，才会进入响应的终态。
- JDK1.7之前，FutureTask通过内部类实现了AQS框架来实现功能。 JDK1.7及以后，则改变为直接通过Unsafe类CAS操作state状态字段来进行同步。
